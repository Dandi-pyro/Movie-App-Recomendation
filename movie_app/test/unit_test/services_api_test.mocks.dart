// Mocks generated by Mockito 5.1.0 from annotations
// in movie_app/test/unit_test/services_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/model/api/service_api.dart' as _i4;
import 'package:movie_app/model/cast_list.dart' as _i9;
import 'package:movie_app/model/genre.dart' as _i7;
import 'package:movie_app/model/movie_detail.dart' as _i2;
import 'package:movie_app/model/movie_image.dart' as _i3;
import 'package:movie_app/model/movie_model.dart' as _i6;
import 'package:movie_app/model/person.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieDetail_0 extends _i1.Fake implements _i2.MovieDetail {}

class _FakeMovieImage_1 extends _i1.Fake implements _i3.MovieImage {}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Movie>> getNowPlayingMovie() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovie, []),
              returnValue: Future<List<_i6.Movie>>.value(<_i6.Movie>[]))
          as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getPopularMovie() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovie, []),
              returnValue: Future<List<_i6.Movie>>.value(<_i6.Movie>[]))
          as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getMovieByGenre(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieByGenre, [movieId]),
              returnValue: Future<List<_i6.Movie>>.value(<_i6.Movie>[]))
          as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i7.Genre>> getGenreList() =>
      (super.noSuchMethod(Invocation.method(#getGenreList, []),
              returnValue: Future<List<_i7.Genre>>.value(<_i7.Genre>[]))
          as _i5.Future<List<_i7.Genre>>);
  @override
  _i5.Future<List<_i8.Person>> getTrendingPerson() =>
      (super.noSuchMethod(Invocation.method(#getTrendingPerson, []),
              returnValue: Future<List<_i8.Person>>.value(<_i8.Person>[]))
          as _i5.Future<List<_i8.Person>>);
  @override
  _i5.Future<_i2.MovieDetail> getMovieDetail(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [movieId]),
              returnValue: Future<_i2.MovieDetail>.value(_FakeMovieDetail_0()))
          as _i5.Future<_i2.MovieDetail>);
  @override
  _i5.Future<String> getYoutubeId(int? id) =>
      (super.noSuchMethod(Invocation.method(#getYoutubeId, [id]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i3.MovieImage> getMovieImage(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieImage, [movieId]),
              returnValue: Future<_i3.MovieImage>.value(_FakeMovieImage_1()))
          as _i5.Future<_i3.MovieImage>);
  @override
  _i5.Future<List<_i9.Cast>> getCastList(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getCastList, [movieId]),
              returnValue: Future<List<_i9.Cast>>.value(<_i9.Cast>[]))
          as _i5.Future<List<_i9.Cast>>);
}
